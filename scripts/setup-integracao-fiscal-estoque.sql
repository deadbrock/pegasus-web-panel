-- ============================================
-- INTEGRAÇÃO AUTOMÁTICA FISCAL → ESTOQUE
-- Quando nota de ENTRADA for processada,
-- produtos vão automaticamente para o estoque
-- ============================================

-- ============================================
-- FUNÇÃO: Processar Nota Fiscal para Estoque
-- ============================================
CREATE OR REPLACE FUNCTION processar_nota_para_estoque(p_nota_fiscal_id UUID)
RETURNS TABLE (
  produtos_criados INT,
  produtos_atualizados INT,
  total_processado INT
) 
LANGUAGE plpgsql
AS $$
DECLARE
  v_nota RECORD;
  v_item RECORD;
  v_produto_existente RECORD;
  v_produtos_criados INT := 0;
  v_produtos_atualizados INT := 0;
BEGIN
  -- Buscar nota fiscal
  SELECT * INTO v_nota 
  FROM public.notas_fiscais 
  WHERE id = p_nota_fiscal_id;
  
  -- Verificar se é nota de entrada
  IF v_nota.tipo_operacao != 'entrada' THEN
    RAISE NOTICE 'Nota fiscal não é de entrada. Tipo: %', v_nota.tipo_operacao;
    RETURN QUERY SELECT 0, 0, 0;
    RETURN;
  END IF;
  
  -- Processar cada item da nota
  FOR v_item IN 
    SELECT * FROM public.itens_nota_fiscal 
    WHERE nota_fiscal_id = p_nota_fiscal_id
    AND processado = false
  LOOP
    -- Verificar se produto já existe no estoque
    SELECT * INTO v_produto_existente
    FROM public.produtos
    WHERE codigo = v_item.produto_codigo;
    
    IF FOUND THEN
      -- PRODUTO JÁ EXISTE: Atualizar quantidade e valor
      UPDATE public.produtos
      SET 
        estoque_atual = estoque_atual + v_item.quantidade,
        preco_unitario = v_item.valor_unitario,
        updated_at = NOW()
      WHERE codigo = v_item.produto_codigo;
      
      v_produtos_atualizados := v_produtos_atualizados + 1;
      
      RAISE NOTICE 'Produto % atualizado: +% unidades', v_item.produto_codigo, v_item.quantidade;
    ELSE
      -- PRODUTO NÃO EXISTE: Criar novo
      INSERT INTO public.produtos (
        codigo,
        nome,
        categoria,
        unidade,
        estoque_atual,
        estoque_minimo,
        localizacao,
        preco_unitario,
        fornecedor,
        ativo
      ) VALUES (
        v_item.produto_codigo,
        COALESCE(v_item.produto_descricao, v_item.produto_codigo), -- Usa descrição do XML, ou código se não tiver
        'Geral', -- Categoria padrão
        'UN', -- Unidade padrão
        v_item.quantidade, -- Quantidade da nota
        0, -- Estoque mínimo em branco (usuário preenche depois)
        '', -- Localização em branco (usuário preenche depois)
        v_item.valor_unitario,
        v_nota.razao_social, -- Fornecedor da nota
        true
      );
      
      v_produtos_criados := v_produtos_criados + 1;
      
      RAISE NOTICE 'Produto % criado com % unidades', v_item.produto_codigo, v_item.quantidade;
    END IF;
    
    -- Marcar item como processado
    UPDATE public.itens_nota_fiscal
    SET processado = true
    WHERE id = v_item.id;
    
    -- Criar movimentação de estoque
    INSERT INTO public.movimentacoes_estoque (
      nota_fiscal_id,
      produto_codigo,
      quantidade,
      tipo,
      custo_unitario
    ) VALUES (
      p_nota_fiscal_id,
      v_item.produto_codigo,
      v_item.quantidade,
      'entrada_nota',
      v_item.valor_unitario
    );
  END LOOP;
  
  RETURN QUERY SELECT 
    v_produtos_criados, 
    v_produtos_atualizados, 
    (v_produtos_criados + v_produtos_atualizados);
END;
$$;

-- ============================================
-- TRIGGER: Auto-processar quando status = Processada
-- ============================================
CREATE OR REPLACE FUNCTION trigger_processar_nota_entrada()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
DECLARE
  v_resultado RECORD;
BEGIN
  -- Verificar se mudou para 'Processada' e é entrada
  IF NEW.status = 'Processada' 
     AND OLD.status != 'Processada' 
     AND NEW.tipo_operacao = 'entrada' THEN
    
    RAISE NOTICE 'Processando nota % para estoque...', NEW.numero;
    
    -- Chamar função de processamento
    SELECT * INTO v_resultado
    FROM processar_nota_para_estoque(NEW.id);
    
    RAISE NOTICE 'Processamento concluído: % produtos criados, % atualizados', 
                 v_resultado.produtos_criados, 
                 v_resultado.produtos_atualizados;
  END IF;
  
  RETURN NEW;
END;
$$;

-- Remover trigger antigo se existir
DROP TRIGGER IF EXISTS trg_processar_nota_entrada ON public.notas_fiscais;

-- Criar trigger
CREATE TRIGGER trg_processar_nota_entrada
AFTER UPDATE ON public.notas_fiscais
FOR EACH ROW
EXECUTE FUNCTION trigger_processar_nota_entrada();

-- ============================================
-- CRIAR TABELA DE MOVIMENTAÇÕES SE NÃO EXISTIR
-- ============================================
CREATE TABLE IF NOT EXISTS public.movimentacoes_estoque (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nota_fiscal_id UUID NULL REFERENCES public.notas_fiscais(id) ON DELETE SET NULL,
  produto_codigo TEXT NOT NULL,
  quantidade NUMERIC NOT NULL,
  tipo TEXT NOT NULL CHECK (tipo IN ('entrada_nota','ajuste','saida')),
  custo_unitario NUMERIC NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS mov_estoque_nf_idx ON public.movimentacoes_estoque(nota_fiscal_id);
CREATE INDEX IF NOT EXISTS mov_estoque_produto_idx ON public.movimentacoes_estoque(produto_codigo);
CREATE INDEX IF NOT EXISTS mov_estoque_data_idx ON public.movimentacoes_estoque(created_at DESC);

-- Habilitar RLS
ALTER TABLE public.movimentacoes_estoque ENABLE ROW LEVEL SECURITY;

-- Políticas RLS
DROP POLICY IF EXISTS "public_mov_select" ON public.movimentacoes_estoque;
CREATE POLICY "public_mov_select" ON public.movimentacoes_estoque FOR SELECT USING (true);

DROP POLICY IF EXISTS "public_mov_insert" ON public.movimentacoes_estoque;
CREATE POLICY "public_mov_insert" ON public.movimentacoes_estoque FOR INSERT WITH CHECK (true);

-- ============================================
-- VERIFICAÇÃO FINAL
-- ============================================
DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '========================================';
  RAISE NOTICE '✅ INTEGRAÇÃO FISCAL → ESTOQUE CRIADA!';
  RAISE NOTICE '========================================';
  RAISE NOTICE '';
  RAISE NOTICE 'FUNCIONAMENTO:';
  RAISE NOTICE '1. Quando uma nota de ENTRADA for processada';
  RAISE NOTICE '2. Produtos são automaticamente criados/atualizados no estoque';
  RAISE NOTICE '3. Produtos novos: estoque_minimo e localização ficam vazios';
  RAISE NOTICE '4. Produtos existentes: quantidade e preço são atualizados';
  RAISE NOTICE '5. Movimentação de estoque é registrada';
  RAISE NOTICE '';
  RAISE NOTICE 'TESTE:';
  RAISE NOTICE '1. Crie/importe uma nota fiscal de entrada';
  RAISE NOTICE '2. Mude status para "Processada"';
  RAISE NOTICE '3. Vá em /dashboard/estoque';
  RAISE NOTICE '4. Produtos aparecerão automaticamente!';
  RAISE NOTICE '';
  RAISE NOTICE '========================================';
END$$;

